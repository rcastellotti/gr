tinymembench v0.4 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :  12843.8 MB/s (1.0%)
 C copy backwards (32 byte blocks)                    :  12906.2 MB/s (0.4%)
 C copy backwards (64 byte blocks)                    :  12894.7 MB/s (0.5%)
 C copy                                               :  13222.6 MB/s (0.4%)
 C copy prefetched (32 bytes step)                    :  13559.4 MB/s (1.2%)
 C copy prefetched (64 bytes step)                    :  13601.1 MB/s (0.8%)
 C 2-pass copy                                        :  10111.0 MB/s (0.3%)
 C 2-pass copy prefetched (32 bytes step)             :  11647.9 MB/s (0.5%)
 C 2-pass copy prefetched (64 bytes step)             :  11734.7 MB/s (9.4%)
 C fill                                               :  25730.6 MB/s (2.9%)
 C fill (shuffle within 16 byte blocks)               :  25967.0 MB/s (1.1%)
 C fill (shuffle within 32 byte blocks)               :  25754.3 MB/s (0.8%)
 C fill (shuffle within 64 byte blocks)               :  24651.0 MB/s (0.8%)
 ---
 standard memcpy                                      :  22727.0 MB/s (0.5%)
 standard memset                                      :  33170.8 MB/s (1.0%)
 ---
 MOVSB copy                                           :  16455.3 MB/s (2.0%)
 MOVSD copy                                           :  16374.4 MB/s (1.4%)
 SSE2 copy                                            :  15447.7 MB/s (1.1%)
 SSE2 nontemporal copy                                :  21958.9 MB/s (0.6%)
 SSE2 copy prefetched (32 bytes step)                 :  15095.1 MB/s (0.6%)
 SSE2 copy prefetched (64 bytes step)                 :  14990.5 MB/s (0.6%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :  22455.2 MB/s (0.9%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :  22339.7 MB/s (0.7%)
 SSE2 2-pass copy                                     :  12855.3 MB/s (1.2%)
 SSE2 2-pass copy prefetched (32 bytes step)          :  12777.6 MB/s (1.0%)
 SSE2 2-pass copy prefetched (64 bytes step)          :  12374.8 MB/s (1.1%)
 SSE2 2-pass nontemporal copy                         :   4002.3 MB/s (0.5%)
 SSE2 fill                                            :  29842.6 MB/s (1.3%)
 SSE2 nontemporal fill                                :  23471.8 MB/s (2.7%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 MOVSD copy (from framebuffer)                        :    270.7 MB/s (0.3%)
 MOVSD 2-pass copy (from framebuffer)                 :    258.8 MB/s
 SSE2 copy (from framebuffer)                         :    137.8 MB/s (0.5%)
 SSE2 2-pass copy (from framebuffer)                  :    138.2 MB/s (0.2%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    1.1 ns          /     1.6 ns 
    131072 :    1.6 ns          /     2.0 ns 
    262144 :    1.9 ns          /     2.2 ns 
    524288 :    4.3 ns          /     5.6 ns 
   1048576 :    8.7 ns          /    11.4 ns 
   2097152 :   11.3 ns          /    13.7 ns 
   4194304 :   12.8 ns          /    14.5 ns 
   8388608 :   22.4 ns          /    28.9 ns 
  16777216 :   34.5 ns          /    44.7 ns 
  33554432 :   55.8 ns          /    74.8 ns 
  67108864 :   96.7 ns          /   128.4 ns 

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    1.1 ns          /     1.6 ns 
    131072 :    1.6 ns          /     2.0 ns 
    262144 :    1.9 ns          /     2.2 ns 
    524288 :    2.4 ns          /     2.6 ns 
   1048576 :    7.1 ns          /     9.7 ns 
   2097152 :    9.4 ns          /    11.7 ns 
   4194304 :   11.2 ns          /    13.5 ns 
   8388608 :   12.3 ns          /    12.7 ns 
  16777216 :   12.3 ns          /    13.4 ns 
  33554432 :   17.9 ns          /    23.4 ns 
  67108864 :   75.6 ns          /    99.7 ns 
